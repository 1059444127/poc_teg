#!/usr/local/bin/python
#	
#	survey.py
#
#	creates a tab delimited file from fractional full factorial question pairs generated by cojoint.R
#	based on methods from:  http://tolstoy.newcastle.edu.au/R/e10/help/att-8876/DCE_with_R.pdf
#
#	By Alex Godbout, UC Davis Genome Center 
#
#	Last updated by: $Author$
#	Last updated on: 14/12/15
###############################################################################
# Factor code:
# Costly: 		1		Cheap:   	     2 		COST
# High Volume   1       Low Volume:      2		VOLM
# Training Req: 1       No Training Req: 2		CMPX
# Slow:         1       Quick:           2 		QUIK
#
#	Data from Typeform survey (e.g. POC-TEG-report-8.3.csv):
#f141bc562510d88df4b3db8e4ddf9c24,A,A,B,A,A,A,B,B,"2015-09-21 18:10:38","2015-09-21 18:10:55",c8426baa42
#269d4fd98985d08f9ed1088604489ab3,A,A,B,B,B,A,,A,"2015-09-21 18:10:57","2015-09-21 18:11:08",c8426baa42
#a0421553bc5260b38c7347b485298f1e,A,A,B,B,B,A,B,A,"2015-09-21 18:11:11","2015-09-21 18:11:23",c8426baa42
###############################################################################

import csv

#	Open file to write into 
g = open('cojoint.txt', 'w')

#	Get data from first column of questions ("alt1_sort.csv") generated by "conjointA.R"
#	and place into a matrix
f1 = open('alt1_sort.csv')  
csv_f1 = csv.reader(f1) 

a = Matrix(8,8)
f1.next()
j = 0
for row in csv_f1: 
 	j += 1
	for i in range(1,5):
		a.setitem(i,j,int(row[i])-1)

	
#	Get data from first column of questions ("alt2_sort.csv") generated by "conjointB.R"
#	and place into a matrix 
f2 = open('alt2_sort.csv')  
csv_f2 = csv.reader(f2) 

b = Matrix(8,8)
f2.next()
j = 0
for row in csv_f2: 
 	j += 1
	for i in range(1,5):
		b.setitem(i,j,int(row[i])-1)
	
#	Get data from Typeform survey		
h = open('POC-TEG-report-8.3.csv') 
csv_h = csv.reader(h) 

#	Write header into output file
g.write('STR\tRES\tASC\tCOST\tVOLM\tCMPX\tQUIK\n')

c = 0 

#	Trasform responses into a format that suits conditional logistic regression
for row in csv_h: 
	c += 1 
	q = 0 
	for k in range(0,8):
		q += 1
		if row[q] is 'A':
			STR = 100 * c + q 
			RESA = 1 
			RESB = 0 
			RESC = 0 
			ASC1 = 1
			ASC0 = 0

		elif row[q] is 'B': 	
			STR = 100 * c + q 
			RESA = 0 
			RESB = 1 
			RESC = 0 
			ASC1 = 1
			ASC0 = 0
		
		else: 
			STR = 100 * c + q 
			RESA = 0 
			RESB = 0 
			RESC = 1
			ASC1 = 1
			ASC0 = 0
		COSTA = a.getitem(1,q)
		VOLMA = a.getitem(2,q)
		CMPXA= a.getitem(3,q)
		QUIKA = a.getitem(4,q)
		COSTB = b.getitem(1,q)
		VOLMB = b.getitem(2,q)
		CMPXB = b.getitem(3,q)
		QUIKB = b.getitem(4,q)
		g.write('%d\t%d\t%d\t%d\t%d\t%d\t%d\n' % (STR, RESA, ASC1, COSTA, VOLMA, CMPXA, QUIKA))
		g.write('%d\t%d\t%d\t%d\t%d\t%d\t%d\n' % (STR, RESB, ASC1, COSTB, VOLMB, CMPXB, QUIKB))
		g.write('%d\t%d\t%d\t%d\t%d\t%d\t%d\n' % (STR, RESC, ASC0, 0, 0, 0, 0))
		


class Matrix(object):
    def __init__(self, cols, rows):
        self.cols = cols
        self.rows = rows
        # initialize matrix and fill with zeroes
        self.matrix = []
        for i in range(rows):
            ea_row = []
            for j in range(cols):
                ea_row.append(0)
            self.matrix.append(ea_row)
 
    def setitem(self, col, row, v):
        self.matrix[col-1][row-1] = v
 
    def getitem(self, col, row):
        return self.matrix[col-1][row-1]
 
    def __repr__(self):
        outStr = ""
        for i in range(self.rows):
            outStr += 'Row %s = %s\n' % (i+1, self.matrix[i])
        return outStr
        


	
